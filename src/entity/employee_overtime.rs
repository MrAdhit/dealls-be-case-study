//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "employee_overtime")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub created_by: Option<Uuid>,
    pub updated_by: Option<Uuid>,
    pub extra_hours: i16,
    pub attendance_period_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::attendance_period::Entity",
        from = "Column::AttendancePeriodId",
        to = "super::attendance_period::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AttendancePeriod,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedBy",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UpdatedBy",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User1,
}

impl Related<super::attendance_period::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttendancePeriod.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
